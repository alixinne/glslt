language: rust
services: docker

env:
  global:
    - CRATE_NAME=glslt

jobs:
  include:
    # Linux
    - env: TARGET=x86_64-unknown-linux-gnu PYINTERP=python3 PYPIP=pip3 CARGO=cross
      dist: xenial
      os: linux
    - env: TARGET=i686-unknown-linux-gnu PYINTERP=python3 PYPIP=pip3 CARGO=cross
      dist: xenial
      os: linux
    # Windows
    - env: TARGET=i686-pc-windows-msvc PYINTERP=python PYPIP=pip3 PYVERSION=3.7.3 CARGO=cargo
      os: windows
    - env: TARGET=x86_64-pc-windows-msvc PYINTERP=python PYPIP=pip3 PYVERSION=3.7.3-amd64 CARGO=cargo
      os: windows

before_install: |
  set -e
  export PATH="$HOME/.local/bin:$PATH"

  case $TRAVIS_OS_NAME in
    linux)
      # Install Linux dependencies (cross)
      mkdir -p $HOME/.local/bin
      wget -qO- https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar -C $HOME/.local/bin -xzv
      ;;
    windows)
      # Install Windows dependencies (Python)
      export PYENV=$HOME/.pyenv/pyenv-win
      git clone https://github.com/pyenv-win/pyenv-win.git $HOME/.pyenv || true
      export PATH="$PYENV/bin:$PYENV/shims:$APPDATA/python/python37/Scripts:$PATH"
      pyenv install -q $PYVERSION
      pyenv global $PYVERSION
      pyenv rehash
      ;;
    esac

  # Ensure target is installed for Rust
  rustup target add $TARGET

script:
  # Only build the CLI so we don't require Python to be installed
  - $CARGO test --target $TARGET --release
  # Only test the main library (testing is broken when pyo3 is involved)
  - $CARGO build --target $TARGET --release

before_deploy:
  - |
    case $TRAVIS_OS_NAME in
      linux)
        # On Linux, use the manylinux image to build the wheels
        TARGET_ARCH=$(cut -d- -f1 <<< $TARGET)
        docker run --rm -v $(pwd):/io quay.io/pypa/manylinux1_$TARGET_ARCH /io/ci/build_wheels.sh
        ;;
      windows)
        set -x
        # Install maturin for building the package
        pip install --user -U maturin
        # On Windows, we build native binaries using the installed interpreter
        (cd glslt && maturin build --cargo-extra-args='--features python' --target $TARGET --release -i $(cmd //C python -c 'import sys; print(sys.executable)'))
        set +x
        ;;
    esac
  # Build optimized CLI binary
  - $CARGO rustc -p glslt_cli --bin ${CRATE_NAME}cc --target $TARGET --release -- -C lto
  # Build binary archive into target/wheels for deploy
  - |
    case $TRAVIS_OS_NAME in
      linux)
        (cd target/$TARGET/release && tar czf $TRAVIS_BUILD_DIR/target/wheels/$CRATE_NAME-$TRAVIS_TAG-$TARGET.tar.gz glsltcc)
        ;;
      windows)
        (cd target/$TARGET/release && 7z a $TRAVIS_BUILD_DIR/target/wheels/$CRATE_NAME-$TRAVIS_TAG-$TARGET.zip glsltcc.exe)
        ;;
    esac

deploy:
  api_key:
    secure: "h1/dxtxmGHEIrZz/fJnU6s6T/ZaqP7xogWg0CexYzOcaC5/40d8MyuAGQKGN4VqwSZYCchP/s3cxlWth/lcLfCPyDd7j+ZDcpwQukvXfO/0HMU0337hapE4KYNFqY5FZY58xZsRwvhHGXmT6fOSiXLNSEgOKHZwR+wX6w7ICiDFiJhPjbFbk1rIDMZ/5S5hygLY3TgisvP40TbdgvP8EDwjaYqpAM7Iz1lrsJaeKPws2+ToioJ1iAUBbdeUQpb8mZh/iVRX33aJ669LsMriW2yy1sW30KL10MOnEvBa8JjvviNl9kiSS6m4mFh3cH2Fn6JW0F6DgBKQvPq8hfxOIwH6mW/O3m70kxHYgJ2aqK5xmzeIJSKzY5+qfUddVDfb5QGNvgTVp2FU96ikX+R+K465AxgEvypznRcTJROclvZcmgmioTL+GDcAhjzpYe4dQUHj1xOYMVph5tsegEtgl4uNPq+proypMUCr8Kynn6hYKJ2SJqXlvv1l92xrNfi5Ak9IyEJ9DVEMF1bPsJLcDoy9CZhI3e5ujRFGwSUM3360Az3hXlGKOBPtJ//EwR6gmMMRATge9X0f+TipgJLSrGtA8X38tpwZGgfNbsMF60QJzniRJOKKXdkyb1brFfV57AIjz1UI90nYSMr5y2JLmFyHRLpv9VI9PM+7b5HdK7yw="
  file_glob: true
  file: target/wheels/*
  on:
    condition: $TRAVIS_RUST_VERSION = stable
    tags: true
  provider: releases
  skip_cleanup: true
  draft: true

cache:
  cargo: true
  directories:
    - $HOME/.pyenv

before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

notifications:
  email:
    on_success: never
