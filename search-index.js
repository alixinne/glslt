var searchIndex = JSON.parse('{\
"glslt":{"doc":"glslt is the main library that supports the GLSL Template …","t":[13,17,13,4,13,6,13,3,3,13,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,12,11,11,11,0,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,0,3,8,24,11,11,10,11,11,11,11,10,11,11,11,11,5,11,11,11,8,10,10,5,13,4,3,3,13,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,10,11,11,12,0,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5],"n":["ArrayedTemplateParameter","DEFAULT_PREFIX","DuplicatePointerDefinition","Error","InvalidParameter","Result","TransformAsTemplate","TransformConfig","TransformConfigBuilder","UndeclaredPointerType","UnsupportedIdl","UnsupportedPreprocessor","api","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","default","fmt","fmt","fmt","fmt","from","from","from","glsl_ext","into","into","into","new_duplicate_pointer_definition","parse","prefix","prefix","to_owned","to_owned","to_string","transform","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","util","0","0","0","0","index","name","name","previous_declaration","cli","Opts","StructOpt","StructOpt","borrow","borrow_mut","clap","clap","from","from_args","from_args_safe","from_clap","from_clap","from_iter","from_iter_safe","into","main","try_from","try_into","type_id","FunIdentifierExt","as_ident_or_type_name","as_ident_or_type_name_mut","make_parse_context","Borrowed","FnHandle","FnRef","MinUnit","Owned","TransformUnit","Unit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","eq","fmt","fmt","fmt","fmt","fn_ref","from","from","from","from","from","from","global_scope","global_scope","global_scope","global_scope_mut","global_scope_mut","global_scope_mut","into","into","into","into","into_translation_unit","into_translation_unit","iter_declarations","iter_functions","ne","new","new","parse_external_declaration","parse_external_declaration","parse_external_declaration","prototype","push_function_declaration","push_function_declaration","push_function_declaration","statement","template","to_owned","to_owned","to_owned","to_owned","transform","transform_min","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_config","with_config","with_context","with_context","0","0","Function","Template","TemplateDefinition","TemplateParameter","TryTemplate","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","extract_template_parameters","fmt","fmt","fn_ref","from","from","from","generate_id","index","instantiate","into","into","into","parameters","parse_definition_as_template","symbol","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","typename","0","0","is_builtin_glsl_function"],"q":["glslt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glslt::Error","","","","","","","","glslt::api","glslt::api::cli","","","","","","","","","","","","","","","","","","","glslt::glsl_ext","","","glslt::parse","glslt::transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glslt::transform::FnHandle","","glslt::transform::template","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glslt::transform::template::TryTemplate","","glslt::util"],"d":["Template parameter declared with an array specifier","Prefix for generated names for functions and captured …","Re-declaration of a function pointer type","GLSLT transform error type","Invalid parameter in template argument call","GLSLT Result","Could not transform the call from available arguments","Global trasnform parameters","Builder for <code>TransformConfig</code>.","Undeclared pointer type","Unsupported declarator list in minifying mode","Unsupported preprocessor directive in minifying mode","API wrapper module","","","","","","","Builds a new <code>TransformConfig</code>.","","","","","","","","","","","","","","glsl_lang extensions","","","","Create a new DuplicatePointerDefinition","Parsing utilities","Identifier prefix for code generation","Identifier prefix for code generation","","","","GLSLT transform utilities definitions","","","","","","","","","","GLSLT utilities","","","","","0-based position of the parameter in the function …","Name of the duplicated pointer definition","Name of the template parameter","Source code of the previous declaration","Command-line interface to glslt","Command-line arguments structure","A struct that is converted from command line arguments.","Generates the <code>StructOpt</code> impl.","","","Returns <code>clap::App</code> corresponding to the struct.","","","Builds the struct from the command line arguments (…","Builds the struct from the command line arguments (…","Builds the struct from <code>clap::ArgMatches</code>. It’s guaranteed …","","Gets the struct from any iterator such as a <code>Vec</code> of your …","Gets the struct from any iterator such as a <code>Vec</code> of your …","","Entry point for the glsltc front-end","","","","Extensions for <code>glsl_lang::ast::FunIdentifier</code>","Return the function name as a string reference","Return the function name as a mutable string reference","Create a parsing context that follows GLSLT’s type rules","Reference to a function declaration","Handle to a function definition somewhere in the glslt …","Reference to a function held in a transformation unit","Minimizing GLSLT template instantiation context","Reference to a template definition","Represent a GLSLT transform unit","GLSLT template instantiation context","","","","","","","","","","","","","","","","","","","","","","","","Create a FnRef for this handle","","","","","","","Obtain a reference to the template definition context","","","Obtain a mutable reference to the template definition …","","","","","","","Transform this unit into a GLSL syntax tree","Transform this unit into a GLSL syntax tree","Obtain an iterator to all the top-level declarations in …","Obtain an iterator to the functions and templates defined …","","Create a new minifying transform unit","Create a new transform unit","Parse a GLSLT declaration and add it to the transform unit","","","Prototype of the target function","Add a function declaration to the transform unit","","","Contents of the target function","Definitions of template function abstractrepresentations","","","","","Transform a GLSLT AST to an instantiated GLSL AST","Transform a GLSLT AST to an instantiated GLSL AST. Only …","","","","","","","","","","","","","Create a new transform unit with the given configuration","Create a new transform unit with the given configuration","Create a new minifying transform unit using pre-defined …","Create a new transform unit using pre-defined templates","","","GLSL function","GLSLT template function","Definition of a template function","Function parameter of a template","Result of parsing a function definition","Get the AST of this template definition","","","","","","","","","","","Extract the template parameters from the full set of call …","","","Get the FnRef definition of this template","","","","Generate a unique ID for the given template invocation","Original parameter index","Instantiate this template definition into a GLSL function","","","","Get the list of parameters of this template","Try parsing a function definition as a template","Template variable name","","","","","","","","","","","","Name of the function pointer type","","","Return <code>true</code> if <code>name</code> is the name of a built-in GLSL function"],"i":[1,0,1,0,1,0,1,0,0,1,1,1,0,2,3,1,2,3,1,3,2,3,2,3,2,3,2,3,1,1,2,3,1,0,2,3,1,1,0,3,2,2,3,1,0,2,3,1,2,3,1,2,3,1,0,4,5,6,7,8,9,8,9,0,0,0,0,10,10,11,10,10,11,11,11,10,11,11,10,0,10,10,10,0,12,12,0,13,0,0,0,13,0,0,14,13,15,16,14,13,15,16,14,13,15,16,14,13,15,16,15,16,14,14,13,15,16,13,14,13,13,13,15,16,17,15,16,17,15,16,14,13,15,16,15,16,15,15,14,15,16,17,15,16,14,17,15,16,14,0,14,13,15,16,0,0,14,13,15,16,14,13,15,16,14,13,15,16,15,16,15,16,18,19,20,20,0,0,0,21,20,22,21,20,22,21,22,21,22,21,21,22,21,21,20,22,21,21,22,21,20,22,21,21,0,22,22,21,20,22,21,20,22,21,20,22,21,22,23,24,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["transformconfig",3]],[[],["transformconfig",3]],[[],["transformconfigbuilder",3]],[[]],[[]],[[]],[[],["transformconfigbuilder",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[["identifier",6],["functionprototype",6]]],null,[[["string",3]]],null,[[]],[[]],[[],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["app",3]],[[],["app",3]],[[]],[[]],[[],["result",4,[["error",3]]]],[[["argmatches",3]]],[[["argmatches",3]]],[[]],[[],["result",4,[["error",3]]]],[[]],[[["opts",3]],["result",4,[["box",3,[["error",8]]]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["option",4,[["smolstr",3]]]],[[],["option",4,[["smolstr",3]]]],[[["option",4,[["parsecontext",3]]]],["parsecontext",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fnref",3]],[[],["fnhandle",4]],[[],["minunit",3]],[[],["unit",3]],[[]],[[]],[[]],[[]],[[],["minunit",3]],[[],["unit",3]],[[["fnref",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["node",3,[["fnref",3]]]],[[]],[[["arc",3,[["templatedefinition",3]]]]],[[]],[[["node",3,[["fnref",3]]]]],[[]],[[]],[[],["globalscope",3]],[[],["globalscope",3]],[[],["globalscope",3]],[[],["globalscope",3]],[[],["globalscope",3]],[[],["globalscope",3]],[[]],[[]],[[]],[[]],[[],["result",6,[["translationunit",3]]]],[[],["result",6,[["translationunit",3]]]],[[]],[[]],[[["fnref",3]],["bool",15]],[[]],[[]],[[["externaldeclaration",6]],["result",6,[["option",4,[["fnhandle",4]]]]]],[[["externaldeclaration",6]],["result",6,[["option",4,[["fnhandle",4]]]]]],[[["externaldeclaration",6]],["result",6,[["option",4,[["fnhandle",4]]]]]],null,[[["functiondefinition",6]]],[[["functiondefinition",6]]],[[["functiondefinition",6]]],null,null,[[]],[[]],[[]],[[]],[[["transformconfig",3]],["result",6,[["translationunit",3]]]],[[["transformconfig",3]],["result",6,[["translationunit",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["transformconfig",3]]],[[["transformconfig",3]]],[[["globalscope",3]]],[[["globalscope",3]]],null,null,null,null,null,null,null,[[],["functiondefinition",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["templateparameter",3]],[[],["templatedefinition",3]],[[]],[[]],[[["vec",3]],["result",6,[["vec",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["node",3,[["fnref",3]]]],[[]],[[]],[[]],[[["scope",8]],["smolstr",3]],null,[[["localscope",3],["instantiatetemplate",3]],["result",6,[["vec",3,[["functiondefinition",6]]]]]],[[]],[[]],[[]],[[]],[[["functiondefinition",6],["indexmap",3]],["result",6,[["trytemplate",4]]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[["str",15]],["bool",15]]],"p":[[4,"Error"],[3,"TransformConfig"],[3,"TransformConfigBuilder"],[13,"UnsupportedPreprocessor"],[13,"UnsupportedIdl"],[13,"UndeclaredPointerType"],[13,"InvalidParameter"],[13,"ArrayedTemplateParameter"],[13,"DuplicatePointerDefinition"],[3,"Opts"],[8,"StructOpt"],[8,"FunIdentifierExt"],[4,"FnHandle"],[3,"FnRef"],[3,"MinUnit"],[3,"Unit"],[8,"TransformUnit"],[13,"Owned"],[13,"Borrowed"],[4,"TryTemplate"],[3,"TemplateDefinition"],[3,"TemplateParameter"],[13,"Template"],[13,"Function"]]},\
"glsltc":{"doc":"glsltc is the default compiler front-end for the GLSLT …","t":[5],"n":["main"],"q":["glsltc"],"d":[""],"i":[0],"f":[[[],["result",4,[["box",3,[["error",8]]]]]]],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};