var searchIndex = JSON.parse('{\
"glslt":{"doc":"glslt is the main library that supports the GLSL Template…","i":[[4,"Error","glslt","GLSLT transform error type",null,null],[13,"EmptyInput","","No top-level declarations were found in any of the input…",0,null],[13,"IoError","","I/O error",0,null],[13,"ParseError","","GLSL parse error",0,null],[13,"DuplicatePointerDefinition","","Re-declaration of a function pointer type",0,null],[12,"name","glslt::Error","Name of the duplicated pointer definition",1,null],[12,"previous_declaration","","Source code of the previous declaration",1,null],[13,"ArrayedTemplateParameter","glslt","Template parameter declared with an array specifier",0,null],[12,"name","glslt::Error","Name of the template parameter",2,null],[12,"index","","0-based position of the parameter in the function…",2,null],[13,"UnresolvedInclude","glslt","Unresolved include directive",0,null],[13,"UnsupportedPreprocessor","","Unsupported preprocessor directive in minifying mode",0,null],[13,"UnsupportedIDL","","Unsupported declarator list in minifying mode",0,null],[13,"UndeclaredPointerType","","Undeclared pointer type",0,null],[13,"TransformAsTemplate","","Could not transform the call from available arguments",0,null],[13,"InvalidParameter","","Invalid parameter in template argument call",0,null],[5,"parse_files","","Parse a set of files into a single translation unit",null,[[],[["result",6],["translationunit",3]]]],[0,"api","","API wrapper module",null,null],[0,"cli","glslt::api","Command-line interface to glslt",null,null],[8,"StructOpt","glslt::api::cli","A struct that is converted from command line arguments.",null,null],[10,"clap","","Returns [`clap::App`] corresponding to the struct.",3,[[],["app",3]]],[10,"from_clap","","Builds the struct from [`clap::ArgMatches`]. It\'s…",3,[[["argmatches",3]]]],[11,"from_args","","Builds the struct from the command line arguments…",3,[[]]],[11,"from_args_safe","","Builds the struct from the command line arguments…",3,[[],[["error",3],["result",4]]]],[11,"from_iter","","Gets the struct from any iterator such as a `Vec` of your…",3,[[]]],[11,"from_iter_safe","","Gets the struct from any iterator such as a `Vec` of your…",3,[[],[["error",3],["result",4]]]],[24,"StructOpt","","Generates the `StructOpt` impl.",null,null],[3,"Opts","","Command-line arguments structure",null,null],[5,"main","","Entry point for the glsltcc front-end",null,[[["opts",3]],["result",6]]],[11,"new_duplicate_pointer_definition","glslt","Create a new DuplicatePointerDefinition",0,[[["identifier",6],["functionprototype",6]]]],[0,"transform","","GLSLT transform utilities definitions",null,null],[3,"FnRef","glslt::transform","Reference to a function held in a transformation unit",null,null],[12,"prototype","","Prototype of the target function",4,null],[12,"statement","","Contents of the target function",4,null],[3,"MinUnit","","Minimizing GLSLT template instantiation context",null,null],[3,"Unit","","GLSLT template instantiation context",null,null],[4,"FnHandle","","Handle to a function definition somewhere in the glslt units",null,null],[13,"Owned","","Reference to a template definition",5,null],[13,"Borrowed","","Reference to a function declaration",5,null],[5,"transform","","Transform a GLSLT AST to an instantiated GLSL AST",null,[[],[["result",6],["translationunit",3]]]],[5,"transform_min","","Transform a GLSLT AST to an instantiated GLSL AST. Only…",null,[[],[["result",6],["translationunit",3]]]],[11,"fn_ref","","Create a FnRef for this handle",5,[[],[["node",3],["fnref",3]]]],[11,"new","","Create a new minifying transform unit",6,[[]]],[11,"with_context","","Create a new minifying transform unit using pre-defined…",6,[[["globalscope",3]]]],[11,"iter_functions","","Obtain an iterator to the functions and templates defined…",6,[[]]],[11,"into_translation_unit","","Transform this unit into a GLSL syntax tree",6,[[],[["result",6],["translationunit",3]]]],[0,"template","","Definitions of template function abstractrepresentations",null,null],[3,"TemplateParameter","glslt::transform::template","Function parameter of a template",null,null],[12,"typename","","Name of the function pointer type",7,null],[12,"symbol","","Template variable name",7,null],[12,"index","","Original parameter index",7,null],[3,"TemplateDefinition","","Definition of a template function",null,null],[4,"TryTemplate","","Result of parsing a function definition",null,null],[13,"Template","","GLSLT template function",8,null],[13,"Function","","GLSL function",8,null],[5,"parse_definition_as_template","","Try parsing a function definition as a template",null,[[["indexmap",3],["functiondefinition",6]],[["result",6],["trytemplate",4]]]],[11,"ast","","Get the AST of this template definition",9,[[],["functiondefinition",6]]],[11,"parameters","","Get the list of parameters of this template",9,[[]]],[11,"fn_ref","","Get the FnRef definition of this template",9,[[],[["node",3],["fnref",3]]]],[11,"generate_id","","Generate a unique ID for the given template invocation",9,[[],["string",3]]],[11,"instantiate","","Instantiate this template definition into a GLSL function",9,[[["localscope",3],["instantiatetemplate",3]],[["vec",3],["result",6]]]],[11,"extract_template_parameters","","Extract the template parameters from the full set of call…",9,[[["vec",3]],[["result",6],["vec",3]]]],[11,"new","glslt::transform","Create a new transform unit",10,[[]]],[11,"with_context","","Create a new transform unit using pre-defined templates",10,[[["globalscope",3]]]],[11,"into_translation_unit","","Transform this unit into a GLSL syntax tree",10,[[],[["result",6],["translationunit",3]]]],[8,"TransformUnit","","Represent a GLSLT transform unit",null,null],[10,"global_scope","","Obtain a reference to the template definition context",11,[[],["globalscope",3]]],[10,"global_scope_mut","","Obtain a mutable reference to the template definition…",11,[[],["globalscope",3]]],[10,"push_function_declaration","","Add a function declaration to the transform unit",11,[[["functiondefinition",6]]]],[10,"parse_external_declaration","","Parse a GLSLT declaration and add it to the transform unit",11,[[["externaldeclaration",6]],[["option",4],["result",6]]]],[6,"Result","glslt","GLSLT Result",null,null],[17,"PREFIX","","Prefix for generated names for functions and captured…",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","glslt::api::cli","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","glslt::transform","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","glslt::transform::template","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"global_scope","glslt::transform","",6,[[],["globalscope",3]]],[11,"global_scope_mut","","",6,[[],["globalscope",3]]],[11,"push_function_declaration","","",6,[[["functiondefinition",6]]]],[11,"parse_external_declaration","","",6,[[["externaldeclaration",6]],[["option",4],["result",6]]]],[11,"global_scope","","",10,[[],["globalscope",3]]],[11,"global_scope_mut","","",10,[[],["globalscope",3]]],[11,"push_function_declaration","","",10,[[["functiondefinition",6]]]],[11,"parse_external_declaration","","",10,[[["externaldeclaration",6]],[["option",4],["result",6]]]],[11,"from","glslt","",0,[[["error",3]]]],[11,"from","","",0,[[["parseerror",3]]]],[11,"from","glslt::transform","",5,[[["templatedefinition",3],["arc",3]]]],[11,"from","","",5,[[["node",3],["fnref",3]]]],[11,"clone","","",4,[[],["fnref",3]]],[11,"clone","","",5,[[],["fnhandle",4]]],[11,"clone","","",6,[[],["minunit",3]]],[11,"clone","glslt::transform::template","",7,[[],["templateparameter",3]]],[11,"clone","","",9,[[],["templatedefinition",3]]],[11,"clone","glslt::transform","",10,[[],["unit",3]]],[11,"default","","",6,[[],["minunit",3]]],[11,"default","","",10,[[],["unit",3]]],[11,"eq","","",4,[[["fnref",3]]]],[11,"ne","","",4,[[["fnref",3]]]],[11,"fmt","glslt","",0,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::transform","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::transform::template","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::transform","",10,[[["formatter",3]],["result",6]]],[11,"fmt","glslt","",0,[[["formatter",3]],["result",6]]],[11,"source","","",0,[[],[["option",4],["error",8]]]],[11,"clap","glslt::api::cli","",12,[[],["app",3]]],[11,"from_clap","","",12,[[["argmatches",3]]]],[11,"augment_clap","","",12,[[["app",3]],["app",3]]],[11,"is_subcommand","","",12,[[]]]],"p":[[4,"Error"],[13,"DuplicatePointerDefinition"],[13,"ArrayedTemplateParameter"],[8,"StructOpt"],[3,"FnRef"],[4,"FnHandle"],[3,"MinUnit"],[3,"TemplateParameter"],[4,"TryTemplate"],[3,"TemplateDefinition"],[3,"Unit"],[8,"TransformUnit"],[3,"Opts"]]},\
"glsltcc":{"doc":"glsltcc is the default compiler front-end for the GLSLT…","i":[[5,"main","glsltcc","",null,[[],["result",6]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);