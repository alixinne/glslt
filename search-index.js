var searchIndex = JSON.parse('{\
"glslt":{"doc":"glslt is the main library that supports the GLSL Template …","i":[[0,"api","glslt","API wrapper module",null,null],[0,"cli","glslt::api","Command-line interface to glslt",null,null],[8,"StructOpt","glslt::api::cli","A struct that is converted from command line arguments.",null,null],[10,"clap","","Returns [<code>clap::App</code>] corresponding to the struct.",0,[[],["app",3]]],[10,"from_clap","","Builds the struct from [<code>clap::ArgMatches</code>]. It\'s …",0,[[["argmatches",3]]]],[11,"from_args","","Builds the struct from the command line arguments ([…",0,[[]]],[11,"from_args_safe","","Builds the struct from the command line arguments ([…",0,[[],[["error",3],["result",4]]]],[11,"from_iter","","Gets the struct from any iterator such as a <code>Vec</code> of your …",0,[[]]],[11,"from_iter_safe","","Gets the struct from any iterator such as a <code>Vec</code> of your …",0,[[],[["error",3],["result",4]]]],[24,"StructOpt","","Generates the <code>StructOpt</code> impl.",null,null],[3,"Opts","","Command-line arguments structure",null,null],[5,"main","","Entry point for the glsltcc front-end",null,[[["opts",3]],["result",6]]],[0,"glsl_ext","glslt","glsl_lang extensions",null,null],[8,"FunIdentifierExt","glslt::glsl_ext","Extensions for [<code>glsl_lang::ast::FunIdentifier</code>]",null,null],[10,"as_ident_or_type_name","","Return the function name as a string reference",1,[[],[["option",4],["smolstr",3]]]],[10,"as_ident_or_type_name_mut","","Return the function name as a mutable string reference",1,[[],[["smolstr",3],["option",4]]]],[0,"parse","glslt","Parsing utilities",null,null],[8,"PreprocessorFs","glslt::parse","Filesystem abstraction for include resolving",null,null],[16,"Error","","Error type for i/o errors",2,null],[10,"read","","Read the contents of a file given by its path",2,[[["path",3]],[["cow",4],["result",4]]]],[10,"canonicalize","","Canonicalize the given path",2,[[["path",3]],[["result",4],["pathbuf",3]]]],[10,"resolve","","Resolve an include path to an actual file",2,[[["path",4],["path",3]],[["result",4],["pathbuf",3]]]],[3,"StdPreprocessorFs","","Implementation of [super::PreprocessorFs] for [std::fs]",null,null],[4,"StdPreprocessorFsError","","std::fs resolver error",null,null],[13,"Io","","I/O error",3,null],[13,"UnresolvedInclude","","Unresolved include directive",3,null],[13,"ParseError","","Parse error",3,null],[5,"parse_source_default","","Parse the given source with default filesystem inclusion",null,[[["str",15]],[["stdpreprocessorfserror",4],["result",4]]]],[5,"parse_source","","Process the includes of some raw source",null,[[["parsecontext",3],["path",3],["option",4],["str",15]],["result",4]]],[5,"parse_files","","Parse a set of files into a single translation unit",null,[[["option",4],["parsecontext",3]],["result",4]]],[0,"transform","glslt","GLSLT transform utilities definitions",null,null],[0,"template","glslt::transform","Definitions of template function abstractrepresentations",null,null],[3,"TemplateParameter","glslt::transform::template","Function parameter of a template",null,null],[12,"typename","","Name of the function pointer type",4,null],[12,"symbol","","Template variable name",4,null],[12,"index","","Original parameter index",4,null],[3,"TemplateDefinition","","Definition of a template function",null,null],[11,"ast","","Get the AST of this template definition",5,[[],["functiondefinition",6]]],[11,"parameters","","Get the list of parameters of this template",5,[[]]],[11,"fn_ref","","Get the FnRef definition of this template",5,[[],[["node",3],["fnref",3]]]],[11,"generate_id","","Generate a unique ID for the given template invocation",5,[[],["smolstr",3]]],[11,"instantiate","","Instantiate this template definition into a GLSL function",5,[[["localscope",3],["instantiatetemplate",3]],[["result",6],["vec",3]]]],[11,"extract_template_parameters","","Extract the template parameters from the full set of call …",5,[[["vec",3]],[["vec",3],["result",6]]]],[4,"TryTemplate","","Result of parsing a function definition",null,null],[13,"Template","","GLSLT template function",6,null],[13,"Function","","GLSL function",6,null],[5,"parse_definition_as_template","","Try parsing a function definition as a template",null,[[["functiondefinition",6],["indexmap",3]],[["result",6],["trytemplate",4]]]],[3,"FnRef","glslt::transform","Reference to a function held in a transformation unit",null,null],[12,"prototype","","Prototype of the target function",7,null],[12,"statement","","Contents of the target function",7,null],[4,"FnHandle","","Handle to a function definition somewhere in the glslt …",null,null],[13,"Owned","","Reference to a template definition",8,null],[13,"Borrowed","","Reference to a function declaration",8,null],[3,"MinUnit","","Minimizing GLSLT template instantiation context",null,null],[8,"TransformUnit","","Represent a GLSLT transform unit",null,null],[10,"global_scope","","Obtain a reference to the template definition context",9,[[],["globalscope",3]]],[10,"global_scope_mut","","Obtain a mutable reference to the template definition …",9,[[],["globalscope",3]]],[10,"push_function_declaration","","Add a function declaration to the transform unit",9,[[["functiondefinition",6]]]],[10,"parse_external_declaration","","Parse a GLSLT declaration and add it to the transform unit",9,[[["externaldeclaration",6]],[["option",4],["result",6]]]],[3,"Unit","","GLSLT template instantiation context",null,null],[5,"transform","","Transform a GLSLT AST to an instantiated GLSL AST",null,[[],[["result",6],["translationunit",3]]]],[5,"transform_min","","Transform a GLSLT AST to an instantiated GLSL AST. Only …",null,[[],[["result",6],["translationunit",3]]]],[17,"PREFIX","glslt","Prefix for generated names for functions and captured …",null,null],[4,"Error","","GLSLT transform error type",null,null],[13,"DuplicatePointerDefinition","","Re-declaration of a function pointer type",10,null],[12,"name","glslt::Error","Name of the duplicated pointer definition",11,null],[12,"previous_declaration","","Source code of the previous declaration",11,null],[13,"ArrayedTemplateParameter","glslt","Template parameter declared with an array specifier",10,null],[12,"name","glslt::Error","Name of the template parameter",12,null],[12,"index","","0-based position of the parameter in the function …",12,null],[13,"UnsupportedPreprocessor","glslt","Unsupported preprocessor directive in minifying mode",10,null],[13,"UnsupportedIdl","","Unsupported declarator list in minifying mode",10,null],[13,"UndeclaredPointerType","","Undeclared pointer type",10,null],[13,"TransformAsTemplate","","Could not transform the call from available arguments",10,null],[13,"InvalidParameter","","Invalid parameter in template argument call",10,null],[6,"Result","","GLSLT Result",null,null],[11,"from","glslt::api::cli","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"into_result","","",13,[[],["result",4]]],[11,"from","glslt","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_string","","",10,[[],["string",3]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"into_result","","",10,[[],["result",4]]],[11,"from","glslt::parse","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"into_result","","",14,[[],["result",4]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_result","","",3,[[],["result",4]]],[11,"from","glslt::transform","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"into_result","","",7,[[],["result",4]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"into_result","","",8,[[],["result",4]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"into_result","","",15,[[],["result",4]]],[11,"from","glslt::transform::template","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_result","","",4,[[],["result",4]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"into_result","","",5,[[],["result",4]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"into_result","","",6,[[],["result",4]]],[11,"from","glslt::transform","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"into_result","","",16,[[],["result",4]]],[11,"read","glslt::parse","",14,[[["path",3]],[["cow",4],["result",4]]]],[11,"canonicalize","","",14,[[["path",3]],[["result",4],["pathbuf",3]]]],[11,"resolve","","",14,[[["path",4],["path",3]],[["result",4],["pathbuf",3]]]],[11,"global_scope","glslt::transform","",15,[[],["globalscope",3]]],[11,"global_scope_mut","","",15,[[],["globalscope",3]]],[11,"push_function_declaration","","",15,[[["functiondefinition",6]]]],[11,"parse_external_declaration","","",15,[[["externaldeclaration",6]],[["option",4],["result",6]]]],[11,"global_scope","","",16,[[],["globalscope",3]]],[11,"global_scope_mut","","",16,[[],["globalscope",3]]],[11,"push_function_declaration","","",16,[[["functiondefinition",6]]]],[11,"parse_external_declaration","","",16,[[["externaldeclaration",6]],[["option",4],["result",6]]]],[11,"from","glslt::parse","",3,[[["error",3]]]],[11,"from","","",3,[[["parseerror",6]]]],[11,"from","glslt::transform","",8,[[["arc",3],["templatedefinition",3]]]],[11,"from","","",8,[[["node",3],["fnref",3]]]],[11,"clone","glslt::parse","",14,[[],["stdpreprocessorfs",3]]],[11,"clone","glslt::transform","",7,[[],["fnref",3]]],[11,"clone","","",8,[[],["fnhandle",4]]],[11,"clone","","",15,[[],["minunit",3]]],[11,"clone","glslt::transform::template","",4,[[],["templateparameter",3]]],[11,"clone","","",5,[[],["templatedefinition",3]]],[11,"clone","glslt::transform","",16,[[],["unit",3]]],[11,"default","glslt::parse","",14,[[],["stdpreprocessorfs",3]]],[11,"default","glslt::transform","",15,[[],["minunit",3]]],[11,"default","","",16,[[],["unit",3]]],[11,"eq","glslt::parse","",3,[[],["bool",15]]],[11,"eq","glslt::transform","",7,[[["fnref",3]],["bool",15]]],[11,"ne","","",7,[[["fnref",3]],["bool",15]]],[11,"fmt","glslt","",10,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::parse","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::transform","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::transform::template","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::transform","",16,[[["formatter",3]],["result",6]]],[11,"fmt","glslt","",10,[[["formatter",3]],["result",6]]],[11,"fmt","glslt::parse","",3,[[["formatter",3]],["result",6]]],[11,"source","","",3,[[],[["option",4],["error",8]]]],[11,"clap","glslt::api::cli","",13,[[],["app",3]]],[11,"from_clap","","",13,[[["argmatches",3]]]],[11,"augment_clap","","",13,[[["app",3]],["app",3]]],[11,"is_subcommand","","",13,[[],["bool",15]]],[11,"new_duplicate_pointer_definition","glslt","Create a new DuplicatePointerDefinition",10,[[["identifier",6],["functionprototype",6]]]],[11,"new","glslt::parse","Create a new StdPreprocessorFs instance with no system …",14,[[]]],[11,"with_include_path","","Create a new StdPreprocessorFs instance with the given …",14,[[]]],[11,"fn_ref","glslt::transform","Create a FnRef for this handle",8,[[],[["node",3],["fnref",3]]]],[11,"new","","Create a new minifying transform unit",15,[[]]],[11,"with_context","","Create a new minifying transform unit using pre-defined …",15,[[["globalscope",3]]]],[11,"iter_functions","","Obtain an iterator to the functions and templates defined …",15,[[]]],[11,"into_translation_unit","","Transform this unit into a GLSL syntax tree",15,[[],[["result",6],["translationunit",3]]]],[11,"new","","Create a new transform unit",16,[[]]],[11,"with_context","","Create a new transform unit using pre-defined templates",16,[[["globalscope",3]]]],[11,"into_translation_unit","","Transform this unit into a GLSL syntax tree",16,[[],[["result",6],["translationunit",3]]]]],"p":[[8,"StructOpt"],[8,"FunIdentifierExt"],[8,"PreprocessorFs"],[4,"StdPreprocessorFsError"],[3,"TemplateParameter"],[3,"TemplateDefinition"],[4,"TryTemplate"],[3,"FnRef"],[4,"FnHandle"],[8,"TransformUnit"],[4,"Error"],[13,"DuplicatePointerDefinition"],[13,"ArrayedTemplateParameter"],[3,"Opts"],[3,"StdPreprocessorFs"],[3,"MinUnit"],[3,"Unit"]]},\
"glsltcc":{"doc":"glsltcc is the default compiler front-end for the GLSLT …","i":[[5,"main","glsltcc","",null,[[],["result",6]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);