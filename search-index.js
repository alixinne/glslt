var searchIndex = JSON.parse('{\
"glslt":{"doc":"glslt is the main library that supports the GLSL Template …","t":[13,17,13,4,13,6,13,3,3,13,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,2,11,11,11,11,0,11,12,11,11,11,11,0,2,2,11,11,11,11,11,11,11,11,11,0,12,12,12,12,0,3,8,8,24,24,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,5,13,4,3,3,13,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,10,11,11,12,0,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,12,5],"n":["ArrayedTemplateParameter","DEFAULT_PREFIX","DuplicatePointerDefinition","Error","InvalidParameter","Result","TransformAsTemplate","TransformConfig","TransformConfigBuilder","UndeclaredPointerType","UnsupportedIdl","UnsupportedPreprocessor","api","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","default","default","fmt","fmt","fmt","fmt","from","from","from","glsl_ext","glsl_lang","into","into","into","new_duplicate_pointer_definition","parse","prefix","prefix","provide","to_owned","to_owned","to_string","transform","transform","transform_min","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","util","index","name","name","previous_declaration","cli","Opts","Parser","Parser","Parser","Parser","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","from","from_arg_matches","from_arg_matches_mut","group_id","into","main","parse","parse","parse_from","parse_from","try_from","try_into","try_parse","try_parse","try_parse_from","try_parse_from","try_update_from","try_update_from","type_id","update_from","update_from","update_from_arg_matches","update_from_arg_matches_mut","FunIdentifierExt","as_ident_or_type_name","as_ident_or_type_name_mut","make_parse_context","Borrowed","FnHandle","FnRef","MinUnit","Owned","TransformUnit","Unit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","eq","fmt","fmt","fmt","fmt","fn_ref","from","from","from","from","from","from","global_scope","global_scope","global_scope","global_scope_mut","global_scope_mut","global_scope_mut","into","into","into","into","into_translation_unit","into_translation_unit","iter_declarations","iter_functions","new","new","parse_external_declaration","parse_external_declaration","parse_external_declaration","prototype","push_function_declaration","push_function_declaration","push_function_declaration","statement","template","to_owned","to_owned","to_owned","to_owned","transform","transform_min","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_config","with_config","with_context","with_context","Function","Template","TemplateDefinition","TemplateParameter","TryTemplate","ast","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","extract_template_parameters","fmt","fmt","fn_ref","from","from","from","generate_id","index","instantiate","into","into","into","parameters","parse_definition_as_template","symbol","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","typename","is_builtin_glsl_function"],"q":["glslt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glslt::Error","","","","glslt::api","glslt::api::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glslt::glsl_ext","","","glslt::parse","glslt::transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glslt::transform::template","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","glslt::util"],"d":["Template parameter declared with an array specifier","Prefix for generated names for functions and captured …","Re-declaration of a function pointer type","GLSLT transform error type","Invalid parameter in template argument call","GLSLT Result","Could not transform the call from available arguments","Global trasnform parameters","Builder for <code>TransformConfig</code>.","Undeclared pointer type","Unsupported declarator list in minifying mode","Unsupported preprocessor directive in minifying mode","API wrapper module","","","","","","","Builds a new <code>TransformConfig</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","glsl_lang extensions","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new DuplicatePointerDefinition","Parsing utilities","Identifier prefix for code generation","Identifier prefix for code generation","","","","","GLSLT transform utilities definitions","","","","","","","","","","","","GLSLT utilities","0-based position of the parameter in the function …","Name of the duplicated pointer definition","Name of the template parameter","Source code of the previous declaration","Command-line interface to glslt","Command-line arguments structure","Parse command-line arguments into <code>Self</code>.","Parse command-line arguments into <code>Self</code>.","Generates the <code>Parser</code> implementation.","Generates the <code>Parser</code> implementation.","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Entry point for the glsltc front-end","Parse from <code>std::env::args_os()</code>, exit on error","Parse from <code>std::env::args_os()</code>, exit on error","Parse from iterator, exit on error","Parse from iterator, exit on error","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Parse from iterator, return Err on error.","Update from iterator, return Err on error.","Update from iterator, return Err on error.","","Update from iterator, exit on error","Update from iterator, exit on error","","","Extensions for <code>glsl_lang::ast::FunIdentifier</code>","Return the function name as a string reference","Return the function name as a mutable string reference","Create a parsing context that follows GLSLT’s type rules","Reference to a function declaration","Handle to a function definition somewhere in the glslt …","Reference to a function held in a transformation unit","Minimizing GLSLT template instantiation context","Reference to a template definition","Represent a GLSLT transform unit","GLSLT template instantiation context","","","","","","","","","","","","","","","","","","","","","","","","Create a FnRef for this handle","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Obtain a reference to the template definition context","","","Obtain a mutable reference to the template definition …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transform this unit into a GLSL syntax tree","Transform this unit into a GLSL syntax tree","Obtain an iterator to all the top-level declarations in …","Obtain an iterator to the functions and templates defined …","Create a new minifying transform unit","Create a new transform unit","Parse a GLSLT declaration and add it to the transform unit","","","Prototype of the target function","Add a function declaration to the transform unit","","","Contents of the target function","Definitions of template function abstractrepresentations","","","","","Transform a GLSLT AST to an instantiated GLSL AST","Transform a GLSLT AST to an instantiated GLSL AST. Only …","","","","","","","","","","","","","Create a new transform unit with the given configuration","Create a new transform unit with the given configuration","Create a new minifying transform unit using pre-defined …","Create a new transform unit using pre-defined templates","GLSL function","GLSLT template function","Definition of a template function","Function parameter of a template","Result of parsing a function definition","Get the AST of this template definition","","","","","","","","","","","Extract the template parameters from the full set of call …","","","Get the FnRef definition of this template","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate a unique ID for the given template invocation","Original parameter index","Instantiate this template definition into a GLSL function","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the list of parameters of this template","Try parsing a function definition as a template","Template variable name","","","","","","","","","","","","Name of the function pointer type","Return <code>true</code> if <code>name</code> is the name of a built-in GLSL function"],"i":[5,0,5,0,5,0,5,0,0,5,5,5,0,2,1,5,2,1,5,1,2,1,2,1,2,1,2,1,5,5,2,1,5,0,0,2,1,5,5,0,1,2,5,2,1,5,0,0,0,2,1,5,2,1,5,2,1,5,0,42,43,42,43,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,0,44,44,44,44,14,14,44,44,44,44,44,44,14,44,44,14,14,0,45,45,0,25,0,0,0,25,0,0,24,25,26,27,24,25,26,27,24,25,26,27,24,25,26,27,26,27,24,24,25,26,27,25,24,25,25,25,26,27,46,26,27,46,26,27,24,25,26,27,26,27,26,26,26,27,46,26,27,24,46,26,27,24,0,24,25,26,27,0,0,24,25,26,27,24,25,26,27,24,25,26,27,26,27,26,27,40,40,0,0,0,30,40,37,30,40,37,30,37,30,37,30,30,37,30,30,40,37,30,30,37,30,40,37,30,30,0,37,37,30,40,37,30,40,37,30,40,37,30,37,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[2,2],[1,1],[[]],[[]],[[],2],[[],1],[[2,3],4],[[1,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[6,7],5],0,[[1,8],1],0,[9],[[]],[[]],[[],8],0,0,0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,[12,12],[12,12],[[]],[[]],[[],12],[[],12],[[]],[13,[[10,[14,15]]]],[13,[[10,[14,15]]]],[[],[[17,[16]]]],[[]],[14,[[10,[[19,[18]]]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],[[10,[[21,[20]]]]]],[[],[[10,[[21,[20]]]]]],[[],[[10,[[21,[20]]]]]],[[],[[10,[[21,[20]]]]]],[[],[[10,[[21,[20]]]]]],[[],[[10,[[21,[20]]]]]],[[],11],[[]],[[]],[[14,13],[[10,[15]]]],[[14,13],[[10,[15]]]],0,[[],[[17,[22]]]],[[],[[17,[22]]]],[[[17,[23]]],23],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,24],[25,25],[26,26],[27,27],[[]],[[]],[[]],[[]],[[],26],[[],27],[[24,24],28],[[24,3],4],[[25,3],4],[[26,3],4],[[27,3],4],[25,[[29,[24]]]],[[]],[[[31,[30]]],25],[[[29,[24]]],25],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[26,32],[[34,[33]]]],[27,[[34,[33]]]],[26,32],[26,32],[[],26],[[],27],[35,[[34,[[17,[25]]]]]],[[26,35],[[34,[[17,[25]]]]]],[[27,35],[[34,[[17,[25]]]]]],0,[36],[[26,36]],[[27,36]],0,0,[[]],[[]],[[]],[[]],[[32,2],[[34,[33]]]],[[32,32,2],[[34,[33]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[2,26],[2,27],0,0,0,0,0,0,0,[30,36],[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[30,30],[[]],[[]],[[30,38],[[34,[38]]]],[[37,3],4],[[30,3],4],[30,[[29,[24]]]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[30],[[36,39],[[34,[40]]]],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,[41,28]],"p":[[3,"TransformConfigBuilder"],[3,"TransformConfig"],[3,"Formatter"],[6,"Result"],[4,"Error"],[6,"Identifier"],[6,"FunctionPrototype"],[3,"String"],[3,"Demand"],[4,"Result"],[3,"TypeId"],[3,"Command"],[3,"ArgMatches"],[3,"Opts"],[6,"Error"],[3,"Id"],[4,"Option"],[8,"Error"],[3,"Box"],[3,"RichFormatter"],[3,"Error"],[3,"SmolStr"],[3,"ParseContext"],[3,"FnRef"],[4,"FnHandle"],[3,"MinUnit"],[3,"Unit"],[15,"bool"],[3,"Node"],[3,"TemplateDefinition"],[3,"Arc"],[8,"Iterator"],[3,"TranslationUnit"],[6,"Result"],[6,"ExternalDeclaration"],[6,"FunctionDefinition"],[3,"TemplateParameter"],[3,"Vec"],[3,"IndexMap"],[4,"TryTemplate"],[15,"str"],[13,"ArrayedTemplateParameter"],[13,"DuplicatePointerDefinition"],[8,"Parser"],[8,"FunIdentifierExt"],[8,"TransformUnit"]]},\
"glsltc":{"doc":"glsltc is the default compiler front-end for the GLSLT …","t":[5],"n":["main"],"q":["glsltc"],"d":[""],"i":[0],"f":[[[],[[3,[[2,[1]]]]]]],"p":[[8,"Error"],[3,"Box"],[4,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
